#!/usr/bin/env python
"""
Copyright (c) 2017, Daniel Krebs, RWTH Aachen University
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
	 documentation and/or other materials provided with the distribution.
   * Neither the name of the University nor the names of its contributors
     may be used to endorse or promote products derived from this
	 software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import sys, os, copy, re

input_file = ""

type_translation = {
#	C type				(ASM type, size, generic export)
	'uint8_t':				('db', 1),
	'uint16_t':				('dw', 2),
	'uint32_t':				('dd', 4),
	'uint64_t': 			('dq', 8),
	'int8_t':				('db', 1),
	'int16_t':				('dw', 2),
	'int32_t':				('dd', 4),
	'int64_t': 				('dq', 8),
	'atomic_int32_t':		('dd', 4),
	'size_t':				('dq', 8),
	'multiboot_info_t*':	('dq', 8)
}

def get_pointer_size():
	return type_translation['size_t'][1]

def is_pointer(type):
	return (type.strip()[-1] == '*')

generic_export_regex = re.compile('[u]*int[0-9]+_t')

def get_generic_type(type):
	size = type_translation[type][1]

	unsigned = 'u'
	if generic_export_regex.match(type):
		if not type[0] == unsigned:
			unsigned = ''

	return unsigned + "int" + str(size * 8) + "_t"


def parse_line(line, number):
	global type_translation

    # ignore empty lines
	if not line:
		return

    # ignore comments
	if line.startswith('//'):
		return

	try:
		# parse into variables
		splitted = line.split()
		c_type = 	splitted[0]
		c_name = 	splitted[1]
		c_value = 	splitted[3]
	except:
		print('Line {}: badly formatted'.format(number))
		sys.exit(1)

	# remove ; from value if present
	if c_value[-1] == ';':
		c_value = c_value[0:-1]


	comment = ''
	if len(splitted) > 5:
		comment = ' '.join(splitted[5:])
		if splitted[4] != '//':
			print("Line {}: unhandled characters after value: '{}'".format(
				number, comment))
			sys.exit(1)

	if not c_type in type_translation:
		print("Line {}: unkown type '{}'".format(number, c_type))
		sys.exit(1)

	return {
		'type': c_type,
		'name': c_name,
		'value': c_value,
		'comment': comment,
		}


def export_c_header(arguments, filename):
	global type_translation, input_file

	def write_members(f, arguments):
		# align name column by equalizing type width
		type_lengths = [len(arg['type']) for arg in arguments]
		member_fmt = '\t{type:' + str(max(type_lengths)) + 's} {name};\n'

		offset = 0
		for argument in arguments:
			if argument['comment']:
				f.write('\t/// {}\n'.format(argument['comment']))

			f.write(member_fmt.format(
				**argument,
				offset = offset))

			offset += type_translation[argument['type']][1]

	with open(filename, 'w') as f:
		f.write('// DO NOT EDIT THIS FILE, because it has been automatically\n')
		f.write('// generated from {}!\n\n'.format(
			os.path.basename(input_file)))

		# add include guard
		f.write('#ifndef ARCH_X86_INCLUDE_ASM_KERNEL_ARGUMENTS\n')
		f.write('#define ARCH_X86_INCLUDE_ASM_KERNEL_ARGUMENTS\n')
		f.write('\n')
		f.write('#ifdef __hermit__\n')
		f.write('#include <asm/stddef.h>\n')
		f.write('#include <asm/atomic32.h>\n')
		f.write('#include <asm/multiboot.h>\n')
		f.write('#elif !defined(__KERNEL__) // generic export (not Linux kernel)\n')
		f.write('#include <stdint.h>\n')
		f.write('#include <unistd.h>\n')
		f.write('#endif // __hermit__\n')
		f.write('\n')
		f.write('typedef struct __attribute__(( packed )) hermit_kernel_arguments {\n')
		f.write('#ifdef __hermit__\n')

		write_members(f, arguments)

		f.write('#else // generic export\n')

		generic_arguments = copy.deepcopy(arguments)
		for arg in generic_arguments:
			arg['type'] = get_generic_type(arg['type'])
		write_members(f, generic_arguments)

		f.write('#endif // __hermit__\n')
		f.write('} hermit_kernel_arguments_t;\n')
		f.write('\n')
		f.write('#ifdef __hermit__\n')
		f.write('extern hermit_kernel_arguments_t kernel_arguments;\n')
		f.write('#else // generic export\n')
		f.write('static const size_t kernel_arguments_offset = 0x08;\n')
		f.write('#endif // __hermit__\n')
		f.write('\n')
		f.write('#endif // ARCH_X86_INCLUDE_ASM_KERNEL_ARGUMENTS\n')


def export_asm_def(arguments, filename):
	global type_translation, input_file

	with open(filename, 'w') as f:
		f.write('; DO NOT EDIT THIS FILE, because it has been automatically\n')
		f.write('; generated from {}!\n\n'.format(
			os.path.basename(input_file)))

		# align name comments by equalizing name width
		name_lengths = [len(arg['name']) for arg in arguments]
		export_fmt = 'global {name:' + str(max(name_lengths)) + 's}\t; offset 0x{offset:02x}\n'

		f.write('; Exporting global symbols\n')
		offset = 0
		for argument in arguments:
			f.write(export_fmt.format(
				name = argument['name'],
				offset = offset))
			offset += type_translation[argument['type']][1]

		f.write('\n; Define arguments\n')
		f.write('align 4\n')
		f.write('global kernel_arguments\n')
		f.write('kernel_arguments:\n')
		for argument in arguments:
			f.write("{name} {type} {value}\n".format(
				name = argument['name'],
				type = type_translation[argument['type']][0],
				value = argument['value']))

def print_usage():
	print("Usage: {} INPUT_FILE OUT_ASM OUT_C".format(
		os.path.basename(sys.argv[0])))

if __name__ == '__main__':
	try:
		input_file = sys.argv[1]
	except:
		print("No input file given\n")
		print_usage()
		sys.exit(1)

	if not os.path.isfile(input_file):
		print("No such file: {}".format(input_file))
		sys.exit(1)

	try:
		output_asm = sys.argv[2]
		output_c = sys.argv[3]
	except:
		print('Not enough arguments\n')
		print_usage()
		sys.exit()

	output_dir_asm = os.path.dirname(output_asm)
	output_dir_c = os.path.dirname(output_c)

	if not os.path.isdir(output_dir_c):
		print("No such directory: {}".format(output_dir_c))
		sys.exit(1)

	if not os.path.isdir(output_dir_asm):
		print("No such directory: {}".format(output_dir_asm))
		sys.exit(1)

	with open(input_file, 'r') as f:
		arguments = []

		# parse input file
		for line_number, line in enumerate(f.readlines()):
			arg = parse_line(line.strip(), line_number + 1)
			if arg:
				arguments.append(arg)

		# export to C header and NASM definitions
		export_asm_def(arguments, output_asm)
		export_c_header(arguments, output_c)
